/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IShoppingListClient {
    getAll(): Observable<GetAllListsResponse>;
    addList(command: AddListCommand): Observable<void>;
    renameList(command: RenameListCommand): Observable<void>;
    getById(id: number): Observable<GetListByIdResponse>;
    addProductByName(command: AddProductByNameCommand): Observable<void>;
    setAsAlreadyBought(command: SetAsAlreadyBoughtCommand): Observable<void>;
}

@Injectable()
export class ShoppingListClient implements IShoppingListClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:51000";
    }

    getAll(): Observable<GetAllListsResponse> {
        let url_ = this.baseUrl + "/api/shopping-lists";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<GetAllListsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetAllListsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GetAllListsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAllListsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAllListsResponse>(<any>null);
    }

    addList(command: AddListCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/shopping-lists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddList(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddList(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    renameList(command: RenameListCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/shopping-lists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRenameList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRenameList(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRenameList(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getById(id: number): Observable<GetListByIdResponse> {
        let url_ = this.baseUrl + "/api/shopping-lists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<GetListByIdResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetListByIdResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<GetListByIdResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetListByIdResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetListByIdResponse>(<any>null);
    }

    addProductByName(command: AddProductByNameCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/shopping-lists/product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddProductByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddProductByName(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddProductByName(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    setAsAlreadyBought(command: SetAsAlreadyBoughtCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/shopping-lists/setItemAsAlreadyBought";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAsAlreadyBought(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAsAlreadyBought(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetAsAlreadyBought(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class GetAllListsResponse implements IGetAllListsResponse {
    shoppingLists?: GetAllListsResponseItem[] | undefined;

    constructor(data?: IGetAllListsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["shoppingLists"])) {
                this.shoppingLists = [] as any;
                for (let item of data["shoppingLists"])
                    this.shoppingLists!.push(GetAllListsResponseItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllListsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllListsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.shoppingLists)) {
            data["shoppingLists"] = [];
            for (let item of this.shoppingLists)
                data["shoppingLists"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetAllListsResponse {
        const json = this.toJSON();
        let result = new GetAllListsResponse();
        result.init(json);
        return result;
    }
}

export interface IGetAllListsResponse {
    shoppingLists?: GetAllListsResponseItem[] | undefined;
}

export class GetAllListsResponseItem implements IGetAllListsResponseItem {
    listId!: number;
    listName?: string | undefined;

    constructor(data?: IGetAllListsResponseItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.listId = data["listId"];
            this.listName = data["listName"];
        }
    }

    static fromJS(data: any): GetAllListsResponseItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllListsResponseItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["listName"] = this.listName;
        return data; 
    }

    clone(): GetAllListsResponseItem {
        const json = this.toJSON();
        let result = new GetAllListsResponseItem();
        result.init(json);
        return result;
    }
}

export interface IGetAllListsResponseItem {
    listId: number;
    listName?: string | undefined;
}

export class GetListByIdResponse implements IGetListByIdResponse {
    shoppingListName?: string | undefined;
    items?: GetListByIdItem[] | undefined;

    constructor(data?: IGetListByIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shoppingListName = data["shoppingListName"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(GetListByIdItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetListByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetListByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shoppingListName"] = this.shoppingListName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetListByIdResponse {
        const json = this.toJSON();
        let result = new GetListByIdResponse();
        result.init(json);
        return result;
    }
}

export interface IGetListByIdResponse {
    shoppingListName?: string | undefined;
    items?: GetListByIdItem[] | undefined;
}

export class GetListByIdItem implements IGetListByIdItem {
    itemId!: number;
    productName?: string | undefined;
    alreadyBought!: boolean;

    constructor(data?: IGetListByIdItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemId = data["itemId"];
            this.productName = data["productName"];
            this.alreadyBought = data["alreadyBought"];
        }
    }

    static fromJS(data: any): GetListByIdItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetListByIdItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        data["productName"] = this.productName;
        data["alreadyBought"] = this.alreadyBought;
        return data; 
    }

    clone(): GetListByIdItem {
        const json = this.toJSON();
        let result = new GetListByIdItem();
        result.init(json);
        return result;
    }
}

export interface IGetListByIdItem {
    itemId: number;
    productName?: string | undefined;
    alreadyBought: boolean;
}

export class AddListCommand implements IAddListCommand {
    listName?: string | undefined;

    constructor(data?: IAddListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.listName = data["listName"];
        }
    }

    static fromJS(data: any): AddListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listName"] = this.listName;
        return data; 
    }

    clone(): AddListCommand {
        const json = this.toJSON();
        let result = new AddListCommand();
        result.init(json);
        return result;
    }
}

export interface IAddListCommand {
    listName?: string | undefined;
}

export class RenameListCommand implements IRenameListCommand {
    listId!: number;
    newName?: string | undefined;

    constructor(data?: IRenameListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.listId = data["listId"];
            this.newName = data["newName"];
        }
    }

    static fromJS(data: any): RenameListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RenameListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["newName"] = this.newName;
        return data; 
    }

    clone(): RenameListCommand {
        const json = this.toJSON();
        let result = new RenameListCommand();
        result.init(json);
        return result;
    }
}

export interface IRenameListCommand {
    listId: number;
    newName?: string | undefined;
}

export class AddProductByNameCommand implements IAddProductByNameCommand {
    shoppingListId!: number;
    productName?: string | undefined;

    constructor(data?: IAddProductByNameCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shoppingListId = data["shoppingListId"];
            this.productName = data["productName"];
        }
    }

    static fromJS(data: any): AddProductByNameCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddProductByNameCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shoppingListId"] = this.shoppingListId;
        data["productName"] = this.productName;
        return data; 
    }

    clone(): AddProductByNameCommand {
        const json = this.toJSON();
        let result = new AddProductByNameCommand();
        result.init(json);
        return result;
    }
}

export interface IAddProductByNameCommand {
    shoppingListId: number;
    productName?: string | undefined;
}

export class SetAsAlreadyBoughtCommand implements ISetAsAlreadyBoughtCommand {
    shoppingListItemId!: number;
    alreadyBought!: boolean;

    constructor(data?: ISetAsAlreadyBoughtCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shoppingListItemId = data["shoppingListItemId"];
            this.alreadyBought = data["alreadyBought"];
        }
    }

    static fromJS(data: any): SetAsAlreadyBoughtCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetAsAlreadyBoughtCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shoppingListItemId"] = this.shoppingListItemId;
        data["alreadyBought"] = this.alreadyBought;
        return data; 
    }

    clone(): SetAsAlreadyBoughtCommand {
        const json = this.toJSON();
        let result = new SetAsAlreadyBoughtCommand();
        result.init(json);
        return result;
    }
}

export interface ISetAsAlreadyBoughtCommand {
    shoppingListItemId: number;
    alreadyBought: boolean;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}